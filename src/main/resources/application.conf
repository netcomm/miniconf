akka.persistence {
  journal {
    plugin = "akka.persistence.journal.leveldb"
  }
}

# Protobuf serializer for cluster DistributedData messages
akka.actor {
  serializers {
    akka-data-replication = "akka.cluster.ddata.protobuf.ReplicatorMessageSerializer"
    akka-replicated-data = "akka.cluster.ddata.protobuf.ReplicatedDataSerializer"
  }
  serialization-bindings {
    "akka.cluster.ddata.Replicator$ReplicatorMessage" = akka-data-replication
    "akka.cluster.ddata.ReplicatedDataSerialization" = akka-replicated-data
  }
  serialization-identifiers {
    "akka.cluster.ddata.protobuf.ReplicatedDataSerializer" = 11
    "akka.cluster.ddata.protobuf.ReplicatorMessageSerializer" = 12
  }
  provider = "akka.cluster.ClusterActorRefProvider"
}

akka.cluster {
  seed-nodes = [
    "akka.tcp://miniconf-system@127.0.0.1:2551"]

  auto-down-unreachable-after = 30s
}

akka {
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      //port = 2551
      port = 0
    }
  }
}

miniconf {
  httpService {
    interface = "127.0.0.1"
    port      = 9000
  }
}